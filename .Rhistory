1,0,0,0,0,0,0,1,0,1,0,
1,0,0,1,0,0,1,1,1,0,1,
0,0,0,1,0,0,1,0,0,1,0),
nrow=11,
ncol=11,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c("1","2","3","4","5","6","7","8","9","10","11")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_9
##################################################
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,1,1,0,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,0,
1,1,1,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,1,1,0,0,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,0,0,
1,0,0,0,1,1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,1,1,0,0,0,
1,0,0,0,0,0,0,1,0,1,0,0,0,
1,0,0,0,0,0,0,1,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,1,0,1,
1,0,0,0,0,0,0,0,0,0,1,1,0),
nrow=13,
ncol=13,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
---
title: "EFL-4 Graphs"
author: "Nick Simone"
date: "Last Modified: `r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{EFL-4 Graphs}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```
------
Abstract:
The code below plots the nine EFL-4 graphs tested by the code in the vignette "EFL-4 Test."  These graphs are stored as variables in the data of the savi package.  The variable names are given in the comments.
------
```{r, message=FALSE, cache=TRUE, eval=FALSE}
library(savi)
##################################################
#EFL4_GRAPH_1
##################################################
adjm<-matrix(c(0,1,1,1,0,0,0,0,0,0,0,0,0,
1,0,1,1,0,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,0,
1,1,1,0,1,1,1,0,0,0,0,0,0,
0,0,0,1,0,1,1,0,0,0,0,0,0,
0,0,0,1,1,0,1,0,0,0,0,0,0,
0,0,0,1,1,1,0,1,1,1,0,0,0,
0,0,0,0,0,0,1,0,1,1,0,0,0,
0,0,0,0,0,0,1,1,0,1,0,0,0,
0,0,0,0,0,0,1,1,1,0,1,1,1,
0,0,0,0,0,0,0,0,0,1,0,1,1,
0,0,0,0,0,0,0,0,0,1,1,0,1,
0,0,0,0,0,0,0,0,0,1,1,1,0),
nrow=13,
ncol=13,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_2
##################################################
adjm<-matrix(c(0,1,1,1,0,0,0,0,0,1,1,1,
1,0,1,1,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,
1,1,1,0,1,1,1,0,0,0,0,0,
0,0,0,1,0,1,1,0,0,0,0,0,
0,0,0,1,1,0,1,0,0,0,0,0,
0,0,0,1,1,1,0,1,1,1,0,0,
0,0,0,0,0,0,1,0,1,1,0,0,
0,0,0,0,0,0,1,1,0,1,0,0,
1,0,0,0,0,0,1,1,1,0,1,1,
1,0,0,0,0,0,0,0,0,1,0,1,
1,0,0,0,0,0,0,0,0,1,1,0),
nrow=12,
ncol=12,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_3
##################################################
adjm<-matrix(c(0,1,1,1,0,0,0,0,0,0,0,0,
1,0,1,1,0,0,0,0,0,0,0,0,
1,1,0,1,0,1,0,1,1,0,0,0,
1,1,1,0,1,1,1,0,0,0,0,0,
0,0,0,1,0,1,1,0,0,0,0,0,
0,0,1,1,1,0,1,1,1,0,0,0,
0,0,0,1,1,1,0,0,0,1,1,1,
0,0,1,0,0,1,0,0,1,0,0,0,
0,0,1,0,0,1,0,1,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,1,1,
0,0,0,0,0,0,1,0,0,1,0,1,
0,0,0,0,0,0,1,0,0,1,1,0),
nrow=12,
ncol=12,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_4
##################################################
adjm<-matrix(c(0,1,1,1,0,1,0,0,0,1,1,
1,0,1,1,0,0,0,0,0,0,0,
1,1,0,1,0,0,1,1,1,0,0,
1,1,1,0,1,1,1,0,0,0,0,
0,0,0,1,0,1,1,0,0,0,0,
1,0,0,1,1,0,1,0,0,1,1,
0,0,1,1,1,1,0,1,1,0,0,
0,0,1,0,0,0,1,0,1,0,0,
0,0,1,0,0,0,1,1,0,0,0,
1,0,0,0,0,1,0,0,0,0,1,
1,0,0,0,0,1,0,0,0,1,0),
nrow=11,
ncol=11,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_5
##################################################
adjm<-matrix(c(0,1,1,1,0,0,0,0,0,0,
1,0,1,1,1,1,1,0,0,0,
1,1,0,1,0,1,0,0,1,1,
1,1,1,0,0,0,1,1,1,0,
0,1,0,0,0,1,1,0,0,0,
0,1,1,0,1,0,1,0,1,1,
0,1,0,1,1,1,0,1,1,0,
0,0,0,1,0,0,1,0,1,0,
0,0,1,1,0,1,1,1,0,1,
0,0,1,0,0,1,0,0,1,0),
nrow=10,
ncol=10,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_6
##################################################
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,0,0,0,
1,0,1,1,0,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,0,
1,1,1,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,1,1,0,0,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,0,0,
1,0,0,0,1,1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,1,1,0,0,0,
1,0,0,0,0,0,0,1,0,1,0,0,0,
1,0,0,0,0,0,0,1,1,0,1,1,1,
0,0,0,0,0,0,0,0,0,1,0,1,1,
0,0,0,0,0,0,0,0,0,1,1,0,1,
0,0,0,0,0,0,0,0,0,1,1,1,0),
nrow=13,
ncol=13,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_7
##################################################
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,0,0,
1,0,1,1,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,
1,1,1,0,0,0,0,0,0,1,1,1,
1,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,0,
1,0,0,0,1,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,1,1,0,0,
1,0,0,0,0,0,0,1,0,1,0,0,
1,0,0,1,0,0,0,1,1,0,1,1,
0,0,0,1,0,0,0,0,0,1,0,1,
0,0,0,1,0,0,0,0,0,1,1,0),
nrow=12,
ncol=12,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_8
##################################################
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,0,
1,0,1,1,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,
1,1,1,0,0,0,1,0,0,1,1,
1,0,0,0,0,1,1,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,
1,0,0,1,1,1,0,0,0,1,1,
1,0,0,0,0,0,0,0,1,1,0,
1,0,0,0,0,0,0,1,0,1,0,
1,0,0,1,0,0,1,1,1,0,1,
0,0,0,1,0,0,1,0,0,1,0),
nrow=11,
ncol=11,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c("1","2","3","4","5","6","7","8","9","10","11")
plotWithGroups(g,1)
##################################################
#EFL4_GRAPH_9
##################################################
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,1,1,0,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,0,
1,1,1,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,1,1,0,0,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,0,0,
1,0,0,0,1,1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,1,1,0,0,0,
1,0,0,0,0,0,0,1,0,1,0,0,0,
1,0,0,0,0,0,0,1,1,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,1,1,
1,0,0,0,0,0,0,0,0,0,1,0,1,
1,0,0,0,0,0,0,0,0,0,1,1,0),
nrow=13,
ncol=13,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
library(savi)
#set seed
set.seed(142)
#Set the Scoring Function
myScoreFunction<-function(g){
#Get the number of Groups
numOfGroups<-max(V(g)$group)
#Count the number of inter-group edges
s<-0
for(i in c(1:numOfGroups)){
s<-s+length(which(tail_of(g,E(g))$group==i & head_of(g,E(g))$group==i))
}
return(s)
}
#Create a list of 9 EFL-4 graphs
g<-list(EFL4_GRAPH_1,EFL4_GRAPH_2,EFL4_GRAPH_3,EFL4_GRAPH_4,EFL4_GRAPH_5,EFL4_GRAPH_6,EFL4_GRAPH_7,EFL4_GRAPH_8,EFL4_GRAPH_9)
arr<-c()
flag<-0
#Loop through the graphs
for(n in 1:9){
myGraph<-g[[n]]
#Try 20 times to find a local minimum state
for(i in 1:20){
myGraph<-addRandomGroups(myGraph,4)
results_Greedy<-runSavi(myGraph,4,"Greedy",1000,myScoreFunction)
if(results_Greedy$minScore!=0){
print("Found possible local minimum state")
arr<-results_Greedy
flag=1
break
}
#Print out progress
print(paste("EFL4 -",n,"iter - ",i))
}
if(flag==1){
break
}
}
library(savi)
#Set the Scoring Function
myScoreFunction<-function(g){
#Get the number of Groups
numOfGroups<-max(V(g)$group)
#Count the number of inter-group edges
s<-0
for(i in c(1:numOfGroups)){
s<-s+length(which(tail_of(g,E(g))$group==i & head_of(g,E(g))$group==i))
}
return(s)
}
#A function which determines if the state passed is a strict
# local minimum state.
isInStrictLocalMinimumState<-function(g,numOfVertexGroups){
inStrictLocalMinimum<-TRUE
scoreG<-myScoreFunction(g)
arr<-1:numOfVertexGroups
for(i in 1:length(V(g))){
for(j in arr[-V(g)$group[[i]]]){
h<-g
V(h)$group[[i]]<-j
if(scoreG==0 || myScoreFunction(h)<=scoreG){
inStrictLocalMinimum<-FALSE
}
}
if(!inStrictLocalMinimum){
break
}
}
return(inStrictLocalMinimum)
}
################################################
#Main Code
################################################
#EFL-3a
strictLocalMinsFoundEFL3a<-0
adjm<-matrix(c(0,1,1,0,0,0,0,
1,0,1,0,0,0,0,
1,1,0,1,1,0,0,
0,0,1,0,1,0,0,
0,0,1,1,0,1,1,
0,0,0,0,1,0,1,
0,0,0,0,1,1,0),
nrow=7,
ncol=7,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
for(a in 1:3){
for(b in 1:3){
for(c in 1:3){
for(d in 1:3){
for(e in 1:3){
for(f in 1:3){
for(x in 1:3){
V(g)$group<-c(a,b,c,d,e,f,x)
if(isInStrictLocalMinimumState(g,3)){
strictLocalMinsFoundEFL3a<-strictLocalMinsFoundEFL3a+1
}
}
}
}
}
}
}
}
load("~/R Workspaces/Thesis/savi/data/EFL4_GRAPH_7.rda")
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,0,0,
1,0,1,1,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,
1,1,1,0,0,0,0,0,0,1,1,1,
1,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,0,
1,0,0,0,1,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,1,1,0,0,
1,0,0,0,0,0,0,1,0,1,0,0,
1,0,0,1,0,0,0,1,1,0,1,1,
0,0,0,1,0,0,0,0,0,1,0,1,
0,0,0,1,0,0,0,0,0,1,1,0),
nrow=12,
ncol=12,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1)
V(g)$name=c(" "," "," "," "," "," "," "," "," "," "," "," ")
plotWithGroups(g,1)
plotWithGroups(g,1)
plotWithGroups(EFL4_GRAPH_1,1)
plotWithGroups(EFL4_GRAPH_7,1)
plotWithGroups(g,0)
plotWithGroups(EFL4_GRAPH_7,1)
plotWithGroups(g,0)
adjm<-matrix(c(0,1,1,1,1,1,1,1,1,1,0,0,
1,0,1,1,0,0,0,0,0,0,0,0,
1,1,0,1,0,0,0,0,0,0,0,0,
1,1,1,0,0,0,0,0,0,1,1,1,
1,0,0,0,0,1,1,0,0,0,0,0,
1,0,0,0,1,0,1,0,0,0,0,0,
1,0,0,0,1,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,1,1,0,0,
1,0,0,0,0,0,0,1,0,1,0,0,
1,0,0,1,0,0,0,1,1,0,1,1,
0,0,0,1,0,0,0,0,0,1,0,1,
0,0,0,1,0,0,0,0,0,1,1,0),
nrow=12,
ncol=12,
byrow = TRUE)
g=graph_from_adjacency_matrix(adjm, mode=c("undirected"))
V(g)$group=c(1,1,1,1,1,1,1,1,1,1,1,1)
plotWithGroups(g,0)
plotWithGroups(EFL4_GRAPH_7,1)
devtools::document()
devtools::document()
devtools::document()
library(savi)
library(savi)
library(savi)
file.exists("~/.ssh/id_rsa.pub")
git init
devtools::document()
myScoringFunction<-function(g){
#Get the number of Groups
numOfGroups<-max(V(g)$group)
#Count the number of inter-group edges
s<-0
for(i in c(1:numOfGroups)){
s<-s+length(which(tail_of(g,E(g))$group==i & head_of(g,E(g))$group==i))
}
return(s)
}
g<-createSaviGraph("EFL",15)
library(savi)
g<-createSaviGraph("EFL",15)
set.seed(142)
results_Greedy<-runSavi(EFL_FIFTEEN_EXAMPLE,15,"Greedy",10000,myScoringFunction)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
g<-createSaviGraph("EFL",15)
plotWithGroups(g,15)
set.seed(142)
results_Greedy<-runSavi(EFL_FIFTEEN_EXAMPLE,15,"Greedy",10000,myScoringFunction)
set.seed(142)
results_Greedy<-runSavi(EFL_FIFTEEN_EXAMPLE,15,"Greedy",10000,myScoringFunction,addOutput=100)
set.seed(142)
results_Greedy<-runSavi(g,15,"Greedy",10000,myScoringFunction,addOutput=100)
plot(results_Greedy$scoreArr)
g<-addRandomGroups(g,15)
set.seed(142)
results_Greedy<-runSavi(g,15,"Greedy",10000,myScoringFunction,addOutput=100)
set.seed(142)
results_Adaptive<-runSavi(g,15,"Adaptive",c(10000,1000,100,0.8,0),myScoringFunction)
set.seed(142)
results_Adaptive<-runSavi(g,15,"Adaptive",c(10000,1000,100,0.8,0),myScoringFunction,addOutput=100)
plot(results_Adaptive$scoreArr)
library(savi)
myScoringFunction<-function(g){
#Number of On Vertices
onVert=length(which(V(g)$group==2))
#Number of edges covered by on vertices
e1<-length(E(g)[from(which(V(g)$group==2))])
eTotal<-length(E(g))
return(onVert + (1.1*(eTotal-e1)))
}
VC_LARGE_EXAMPLE
set.seed(142)
results_Greedy<-runSavi(VC_LARGE_EXAMPLE,2,"Greedy",2500,myScoringFunction)
plot(results_Greedy$scoreArr)
set.seed(142)
results_Adaptive<-runSavi(VC_LARGE_EXAMPLE,2,"Adaptive",c(2500,1000,100,0.8,0),myScoringFunction)
plot(results_Adaptive$scoreArr)
plot(results_Adaptive$scoreArr,ylim=c(15000,10000))
plot(results_Adaptive$scoreArr,ylim=c(10000,15000))
plot(results_Adaptive$scoreArr,ylim=c(10000,15000),xlim=c(0,1000))
plot(results_Greedy$scoreArr,ylim=c(10000,15000),xlim=c(0,1000))
plot(results_Greedy$scoreArr)
plot(results_Adaptive$scoreArr)
length(V(results_Adaptive$minGraphState))
length(V(results_Adaptive$minGraphState)$group==1)
V(results_Adaptive$minGraphState)$group==1
length(V(results_Adaptive$minGraphState)[V(results_Adaptive$minGraphState)$group==1])
length(V(results_Greedy$minGraphState)[V(results_Greedy$minGraphState)$group==1])
devtools::use_data(VC_Large_Example)
use_data(VC_Large_Example)
install.packages("devtools")
library(savi)
library(igraph)
install.packages("igraph")
library(savi)
devtools::use_data(VC_Large_Example)
use_data(VC_Large_Example)
devtools::use_data(VC_Large_Example,savi)
load("VC_LARGE_EXAMPLE")
load("VC_LARGE_EXAMPLE.rda")
getwd()
cd data
cd(data)
setwd("data")
load("VC_LARGE_EXAMPLE.rda")
View(VC_LARGE_EXAMPLE)
VC_LARGE_EXAMPLE$group
VC_LARGE_EXAMPLE$groups
VC_LARGE_EXAMPLE
VC_LARGE_EXAMPLE$group
V(VC_LARGE_EXAMPLE)$group
citation(package="devtools")
